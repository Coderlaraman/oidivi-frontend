Archivos del backend:

1. api.php:

<?php

use App\Http\Controllers\Api\V1\Admin\AdminAuthController;
use App\Http\Controllers\Api\V1\Admin\AdminUserController;
use App\Http\Controllers\Api\V1\CategoryController;
use App\Http\Controllers\Api\V1\Client\ClientAuthController;
use App\Http\Controllers\Api\V1\Client\ClientUserController;
use App\Http\Controllers\Api\V1\ServiceController;
use App\Http\Controllers\Api\V1\SkillController;
use Illuminate\Support\Facades\Route;

// Versión 1 de la API

// Rutas para Admin
Route::prefix('v1/admin')->middleware(['auth:sanctum', 'role:admin'])->group(function () {
    Route::get('/users', [AdminUserController::class, 'index']);
    Route::post('/users', [AdminUserController::class, 'store']);
    Route::delete('/users/{id}', [AdminUserController::class, 'destroy']);
});

// Rutas para Cliente
Route::prefix('v1/client')->group(function () {
    // Ruta de prueba
    Route::get('/test', function () {
        return response()->json(['message' => 'API is working']);
    });

    // Rutas de autenticación
    Route::post('/login', [ClientAuthController::class, 'login']);
    Route::post('/register', [ClientAuthController::class, 'register']);

    // Rutas de categorías
    Route::prefix('categories')->group(function () {
        Route::get('/', [CategoryController::class, 'index']);
        Route::get('/{category}', [CategoryController::class, 'show']);
        Route::post('/', [CategoryController::class, 'store'])->middleware('auth:sanctum');
        Route::put('/{category}', [CategoryController::class, 'update'])->middleware('auth:sanctum');
        Route::delete('/{category}', [CategoryController::class, 'destroy'])->middleware('auth:sanctum');
    });

    // Rutas de habilidades
    Route::prefix('skills')->group(function () {
        Route::get('/', [SkillController::class, 'index']);
        Route::get('/{skill}', [SkillController::class, 'show']);
        Route::post('/', [SkillController::class, 'store'])->middleware('auth:sanctum');
        Route::put('/{skill}', [SkillController::class, 'update'])->middleware('auth:sanctum');
        Route::delete('/{skill}', [SkillController::class, 'destroy'])->middleware('auth:sanctum');
    });

    // Rutas de servicios
    Route::prefix('services')->group(function () {
        Route::get('/', [ServiceController::class, 'index']);
        Route::get('/{id}', [ServiceController::class, 'show']);
        Route::post('/', [ServiceController::class, 'store'])->middleware('auth:sanctum');
        Route::put('/{id}', [ServiceController::class, 'update'])->middleware('auth:sanctum');
        Route::delete('/{id}', [ServiceController::class, 'destroy'])->middleware('auth:sanctum');
        Route::post('/{serviceId}/reviews', [ServiceController::class, 'storeReview'])->middleware('auth:sanctum');
        Route::post('/{serviceId}/transactions', [ServiceController::class, 'storeTransaction'])->middleware('auth:sanctum');
    });

    // Rutas de usuarios
    Route::prefix('users')->group(function () {
        // Buscar usuarios
        Route::get('/search', [ClientUserController::class, 'search']);
        Route::get('/find', [ClientUserController::class, 'find']);
    });

    // Rutas protegidas por autenticación
    Route::middleware('auth:sanctum')->group(function () {
        Route::get('/dashboard', [ClientUserController::class, 'dashboard']);
        Route::get('/me', [ClientUserController::class, 'me']);
        Route::post('/update-profile', [ClientUserController::class, 'updateProfile']);
        Route::post('/logout', [ClientAuthController::class, 'logout']);
        Route::put('user/skills', [ClientUserController::class, 'updateSkills']);
        Route::post('/profile/photo', [ClientUserController::class, 'uploadProfilePhoto']);
        Route::post('/profile/video', [ClientUserController::class, 'uploadProfileVideo']);
    });
});


2. Controlador ClientAuthController.php:

<?php

namespace App\Http\Controllers\Api\V1\Client;

use App\Http\Controllers\Controller;
use App\Http\Resources\ClientAuthResource;
use App\Models\Role;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use App\Models\User;

class ClientAuthController extends Controller
{
    /**
     * Registro de nuevos usuarios
     */
    public function register(Request $request)
    {
        // Validar los datos de entrada
        $validatedData = $request->validate([
            'name' => 'required|string|min:2|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
            'phone' => 'required|string|min:10|max:15', // Añadir validación para teléfono
            'accepted_terms' => 'required|boolean',
            'address' => 'required|string|max:255',
            'zip_code' => 'required|string|max:10',
            'latitude' => 'required|numeric',
            'longitude' => 'required|numeric',
        ], __('validation.custom.register'));

        if (!$validatedData['accepted_terms']) {
            return response()->json([
                'error' => 'You must accept the terms and conditions to proceed.'
            ], 422);
        }

        // Crear el usuario
        $user = User::create([
            'name' => $validatedData['name'],
            'email' => $validatedData['email'],
            'password' => Hash::make($validatedData['password']),
            'phone' => $validatedData['phone'], // Añadir el teléfono
            'accepted_terms' => $validatedData['accepted_terms'],
            'is_active' => true,
            'address' => $validatedData['address'],
            'zip_code' => $validatedData['zip_code'],
            'latitude' => $validatedData['latitude'],
            'longitude' => $validatedData['longitude'],
        ]);

        // Asignar los roles de client y helper
        $clientRole = Role::where('name', 'client')->first();
        $helperRole = Role::where('name', 'helper')->first();

        if ($clientRole && $helperRole) {
            $user->roles()->attach([$clientRole->id, $helperRole->id]);
        }

        // Cargar los roles en el usuario
        $user->load('roles');

        // Generar el token
        $token = $user->createToken('API Token')->plainTextToken;

        return $this->successResponse([
            'token' => $token,
            'user' => new ClientAuthResource($user),
        ], 'User registered successfully.', 201);
    }

    /**
     * Inicio de sesión de usuarios
     */
    public function login(Request $request)
    {
        // Validar los datos de entrada
        $validatedData = $request->validate([
            'email' => 'required|string|email',
            'password' => 'required|string',
        ], __('validation.custom.login'));

        // Buscar el usuario
        $user = User::where('email', $validatedData['email'])->first();

        // Verificar credenciales
        if (!$user || !Hash::check($validatedData['password'], $user->password)) {
            return $this->errorResponse('Invalid credentials.', 401);
        }

        // Generar un token de acceso
        $token = $user->createToken('API Token')->plainTextToken;

        return $this->successResponse([
            'token' => $token,
            'user' => new ClientAuthResource($user),
        ], 'Login successful.');
    }

    /**
     * Cierre de sesión del usuario autenticado
     */
    public function logout(Request $request)
    {
        // Eliminar el token actual
        $request->user()->currentAccessToken()->delete();

        return $this->successResponse([], 'Logout successful.');
    }

    /**
     * Método privado para respuestas de éxito
     */
    private function successResponse(array $data = [], string $message = 'Operation successful', int $statusCode = 200)
    {
        return response()->json([
            'success' => true,
            'message' => $message,
            'data' => $data,
        ], $statusCode);
    }

    /**
     * Método privado para respuestas de error
     */
    private function errorResponse(string $message = 'An error occurred', int $statusCode = 400)
    {
        return response()->json([
            'success' => false,
            'message' => $message,
            'errors' => [],
        ], $statusCode);
    }
}

3. Controlador ClientUserController.php:

<?php

namespace App\Http\Controllers\Api\V1\Client;

use App\Http\Controllers\Controller;
use Exception;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use App\Http\Resources\ClientAuthResource;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Illuminate\Validation\ValidationException;
use App\Models\User;

class ClientUserController extends Controller
{
    public function me(Request $request)
    {
        $user = $request->user();

        return response()->json([
            'success' => true,
            'message' => __('messages.user_data_retrieved'),
            'data' => new ClientAuthResource($user),
        ]);
    }

    public function updateProfile(Request $request)
    {
        try {
            $user = $request->user();

            $validatedData = $request->validate([
                'name' => 'nullable|string|max:255',
                'email' => 'nullable|email|max:255',
                'phone' => 'nullable|string|min:7|max:15',
                'address' => 'nullable|string|max:255',
                'zip_code' => 'nullable|string|max:10',
                'latitude' => 'nullable|numeric',
                'longitude' => 'nullable|numeric',
            ]);

            $user->update(array_filter($validatedData));

            return response()->json([
                'success' => true,
                'message' => __('messages.profile_updated'),
                'data' => new ClientAuthResource($user),
            ]);
        } catch (ValidationException $e) {
            return response()->json([
                'message' => __('messages.validation_error'),
                'errors' => $e->errors(),
            ], 422);
        } catch (Exception $e) {
            return response()->json([
                'message' => __('messages.general_error'),
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    public function uploadProfilePhoto(Request $request)
    {
        return $this->handleFileUpload(
            $request,
            'profile_photo_url',
            'profile_photos',
            __('messages.profile_photo_updated')
        );
    }

    public function uploadProfileVideo(Request $request)
    {
        return $this->handleFileUpload(
            $request,
            'profile_video_url',
            'profile_videos',
            __('messages.profile_video_updated'),
            ['mimes:mp4,mov,avi,wmv', 'max:10240'] // Reglas específicas para videos
        );
    }

    private function handleFileUpload(Request $request, $fieldName, $directory, $successMessage, $rules = ['image', 'mimes:jpeg,png,jpg,gif', 'max:2048'])
    {
        try {
            $request->validate([
                $fieldName => 'required|' . implode('|', $rules),
            ]);

            $user = Auth::user();

            if ($request->hasFile($fieldName)) {
                $file = $request->file($fieldName);
                $filename = time() . '_' . uniqid() . '.' . $file->getClientOriginalExtension();
                $filePath = $file->storeAs($directory, $filename, 'public');

                // Eliminar el archivo anterior si existe
                $oldFile = $user->{$fieldName};
                if ($oldFile) {
                    Storage::disk('public')->delete($oldFile);
                }

                $user->{$fieldName} = $filePath;
                $user->save();

                return response()->json([
                    'message' => $successMessage,
                    $fieldName => asset('storage/' . $filePath),
                ]);
            }

            return response()->json([
                'message' => __('messages.invalid_file_provided'),
            ], 400);
        } catch (ValidationException $e) {
            return response()->json([
                'message' => __('messages.validation_error'),
                'errors' => $e->errors(),
            ], 422);
        } catch (Exception $e) {
            return response()->json([
                'message' => __('messages.general_error'),
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * Actualizar las habilidades del usuario.
     */
    public function updateSkills(Request $request): JsonResponse
    {
        $request->validate([
            'skills' => 'array',
            'skills.*' => 'exists:skills,id',
        ]);

        $user = $request->user();
        $user->skills()->sync($request->skills);

        return response()->json(['message' => 'Skills successfully updated!', 'skills' => $user->skills]);
    }

    /**
     * Buscar usuarios por criterios específicos.
     */
    public function search(Request $request)
    {
        $query = $request->input('query');
        $skillIds = $request->input('skills');
        $categoryIds = $request->input('categories');

        $users = User::query()
            ->when($query, function ($q) use ($query) {
                return $q->where('name', 'like', "%{$query}%")
                         ->orWhere('email', 'like', "%{$query}%");
            })
            ->when($skillIds, function ($q) use ($skillIds) {
                return $q->whereHas('skills', function ($q) use ($skillIds) {
                    $q->whereIn('skills.id', $skillIds);
                });
            })
            ->when($categoryIds, function ($q) use ($categoryIds) {
                return $q->whereHas('skills.categories', function ($q) use ($categoryIds) {
                    $q->whereIn('categories.id', $categoryIds);
                });
            })
            ->get();

        return response()->json([
            'success' => true,
            'data' => ClientAuthResource::collection($users),
        ]);
    }
}


4. Archivo .env:

APP_NAME="OiDiVi Api"
APP_ENV=local
APP_KEY=base64:ZF1RrnIXUIGB5DC6cUqPUqj82+FQupUkjAGNqNdTXSE=
APP_DEBUG=true
APP_TIMEZONE=UTC
APP_URL=http://oidivi-api.test

APP_LOCALE=en
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=en_US

APP_MAINTENANCE_DRIVER=file
# APP_MAINTENANCE_STORE=database

PHP_CLI_SERVER_WORKERS=4

BCRYPT_ROUNDS=12

LOG_CHANNEL=stack
LOG_STACK=single
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=oidivi_api
DB_USERNAME=coderman
DB_PASSWORD=coderman

SESSION_DRIVER=database
SESSION_LIFETIME=120
SESSION_ENCRYPT=false
SESSION_PATH=/
SESSION_DOMAIN=null

BROADCAST_CONNECTION=log
FILESYSTEM_DISK=public
QUEUE_CONNECTION=database

CACHE_STORE=database
CACHE_PREFIX=

MEMCACHED_HOST=127.0.0.1

REDIS_CLIENT=phpredis
REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=log
MAIL_SCHEME=null
MAIL_HOST=127.0.0.1
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

VITE_APP_NAME="${APP_NAME}"

5. Archivo ClientAuthResource.php:

<?php

namespace App\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;
use Illuminate\Support\Facades\Storage;

class ClientAuthResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @return array<string, mixed>
     */
    public function toArray(Request $request): array
    {
        return [
            'id' => $this->id,
            'name' => $this->name,
            'email' => $this->email,
            'accepted_terms' => $this->accepted_terms,
            'is_active' => $this->is_active,
            'phone' => $this->phone,
            'address' => $this->address,
            'zip_code' => $this->zip_code,
            'latitude' => $this->latitude,
            'longitude' => $this->longitude,
            'profile_photo_url' => $this->profile_photo_url
                ? Storage::url($this->profile_photo_url)
                : null,
            'profile_video_url' => $this->profile_video_url
                ? Storage::url($this->profile_video_url)
                : null,
            'created_at' => $this->created_at,
            'updated_at' => $this->updated_at,
            'roles' => $this->roles->pluck('name')->toArray(),
            'skills' => $this->skills->map(function ($skill) {
                return [
                    'id' => $skill->id,
                    'name' => $skill->name,
                    'categories' => $skill->categories->pluck('name')->toArray(),
                ];
            })->toArray(),
        ];
    }
}


6. Archivo User.php:

<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Database\Factories\UserFactory;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    /** @use HasFactory<UserFactory> */
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'is_active',
        'accepted_terms',
        'profile_photo_url',
        'profile_video_url',
        'phone',
        'address',
        'zip_code',
        'latitude',
        'longitude',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'phone_verified_at' => 'datetime',
            'password' => 'hashed',
            'is_active' => 'boolean',
            'accepted_terms' => 'boolean',
            'latitude' => 'float',
            'longitude' => 'float',
        ];
    }

    /**
     * The roles that belong to the user.
     */
    public function roles(): BelongsToMany
    {
        return $this->belongsToMany(Role::class)->withTimestamps();
    }

    /**
     * The skills that belong to the user.
     */
    public function skills(): BelongsToMany
    {
        return $this->belongsToMany(Skill::class)->withTimestamps();
    }
}


7. Archivo 0001_01_01_000000_create_users_table.php:

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->boolean('is_active')->default(true); // Estado del usuario
            $table->boolean('accepted_terms')->default(false); // Aceptó términos y condiciones
            $table->string('profile_photo_url')->nullable(); // URL de la foto de perfil
            $table->string('profile_video_url')->nullable(); // URL del video del perfil
            // phone
            $table->string('phone')->nullable();
            $table->string('phone_verified_at')->nullable();
            $table->string('two_factor_authentication_code')->nullable();
            $table->timestamp('two_factor_authentication_code_sent_at')->nullable();
            $table->timestamp('last_login_at')->nullable();
            $table->timestamp('last_logout_at')->nullable();
            $table->timestamp('last_password_reset_at')->nullable();
            $table->timestamp('last_activity_at')->nullable();
            $table->timestamp('last_ip_address_change_at')->nullable();
            $table->timestamp('last_device_id_change_at')->nullable();
            $table->timestamp('last_browser_id_change_at')->nullable();
            $table->timestamp('last_two_factor_authentication_code_change_at')->nullable();

            // Información de ubicación
            $table->string('address')->nullable();
            $table->string('zip_code')->nullable(); // Código postal
            $table->float('latitude', 10)->nullable();
            $table->float('longitude', 10)->nullable();

            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
};

